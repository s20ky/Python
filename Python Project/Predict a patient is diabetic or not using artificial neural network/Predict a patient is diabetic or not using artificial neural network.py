# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import train_test_split

df = pd.read_excel("/content/diabetes.xlsx")

df.head()

x=df.drop("Outcome",axis=1)

y=df["Outcome"]

x.shape[1]

x_tr,x_test,y_tr,y_test=train_test_split(x,y,test_size=0.2)

input_layer=keras.Input(shape=[x.shape[1]])

hidden_layer1=Dense(10,activation="relu")

hidden_layer1=hidden_layer1(input_layer)

hidden_layer2=Dense(4,activation="relu")

hidden_layer2=hidden_layer2(hidden_layer1)

output_layer=Dense(1,activation="sigmoid")

output_layer=output_layer(hidden_layer2)

model=keras.Model(inputs=input_layer,outputs=output_layer)

model.summary()

keras_earlystop=keras.callbacks.EarlyStopping(monitor="loss",mode="min",patience=5)

model.compile(optimizer="adam",loss="binary_crossentropy",metrics=["accuracy"])

model.fit(x_tr,y_tr,epochs=100,callbacks=[keras_earlystop])

model.evaluate(x_tr,y_tr)

p_tr=model.predict(x_tr)

p_test=model.predict(x_test)

p_test[0:3]

p_list=[]
for i in p_test:
  if i<0.5:
    p_list.append(0)
  else:
    p_list.append(1)

import matplotlib.pyplot as plt

gr=df["Outcome"].value_counts()

gr

colors=["green","red"]

labels=["Non_Diabetic","Diabetic"]

plt.bar(gr.index,gr.values,color=colors,tick_label=labels)
plt.xlabel(labels)
plt.legend()
plt.show()

from sklearn.metrics import  classification_report,accuracy_score

print(classification_report(y_test,p_list))

from sklearn.metrics import confusion_matrix

confusion_matrix(y_test,p_list)

