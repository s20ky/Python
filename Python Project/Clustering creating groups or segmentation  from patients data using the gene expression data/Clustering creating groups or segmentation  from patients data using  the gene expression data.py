# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QJ_QeKn09Scw3OEGFA8a9m27G1og6KxU
"""

import pandas as pd
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.preprocessing import LabelEncoder
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt

pd.set_option("display.max_rows", None)
pd.set_option("display.max_columns", None)
df = pd.read_csv("/content/METABRIC_RNA_Mutation - METABRIC_RNA_Mutation (2).csv")

df.head()

df.dtypes.index

df_mutated_genes = df.loc[:,["death_from_cancer",'mtap_mut', 'ppp2cb_mut', 'smarcd1_mut', 'nras_mut', 'ndfip1_mut','hras_mut', 'prps2_mut', 'smarcb1_mut', 'stmn2_mut', 'siah1_mut']]

df_mutated_genes.head()

df_mutated_genes.dtypes

df_mutated_genes.isnull().sum()

from sklearn.feature_selection import SelectKBest, f_classif

x=df_mutated_genes.drop("death_from_cancer",axis=1)

x=pd.get_dummies(columns=x.columns,data=x,dtype=int,drop_first=True)

x.dtypes

x =x.loc[:,~x.columns.duplicated()].copy()

x.dtypes

df["death_from_cancer"].fillna("Living",inplace=True)

df["death_from_cancer"].value_counts()

y=df["death_from_cancer"]

best_model = SelectKBest(f_classif, k=4).fit(x,y)

col_bst=best_model.get_support(indices=True)

col_bst

x.iloc[:,col_bst].head()

x_new_best=SelectKBest(f_classif, k=4).fit_transform(x,y)

x.dtypes

x_new_best.shape

from sklearn.preprocessing import StandardScaler

x_scaled =StandardScaler().fit_transform(x_new_best)

x_scaled

from sklearn.cluster import KMeans

wcss=[]
for i in range(2,6):
  model=KMeans(init="random",n_clusters=i,random_state=100).fit(x_scaled)
  wcss.append(model.inertia_)

wcss

plt.plot(range(2,6),wcss,marker="o",markerfacecolor="red")

kmeans_final=KMeans(n_clusters=2,init="random").fit(x_scaled)

clusters=kmeans_final.predict(x_scaled)

clusters

x["clusters"]=clusters

x["clusters"].value_counts()

from sklearn.metrics import silhouette_score

silhouette_score(x_new_best,clusters)

"""silhouette_score near perfect result +1 which means feature selection and number of clusters (k) are ideal for this data.

"""

x_new=x.iloc[:,col_bst]

x_new["death_from_cancer"]=y

x_new["clusters"]=clusters

import seaborn as sns

sns.countplot(x="clusters",hue="death_from_cancer",data=x_new)

x_new[x_new.clusters==0].head()

